(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{299:function(t,e,r){"use strict";r.r(e);var a=r(13),o=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"norbert"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#norbert"}},[t._v("#")]),t._v(" norbert")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://doi.org/10.5281/zenodo.3269749",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://zenodo.org/badge/DOI/10.5281/zenodo.3269749.svg",alt:"DOI"}}),e("OutboundLink")],1)]),t._v(" "),e("img",{staticStyle:{margin:"1em"},attrs:{align:"left",src:"https://user-images.githubusercontent.com/72940/45908695-15ce8900-bdfe-11e8-8420-78ad9bb32f84.jpg"}}),t._v(" "),e("p",[t._v("Norbert is an implementation of multichannel Wiener filter, that is a very popular way of filtering multichannel audio for several applications, notably speech enhancement and source separation.")]),t._v(" "),e("p",[t._v("This filtering method assumes you have some way of estimating power or magnitude spectrograms for all the audio sources (non-negative) composing a mixture. If you only have a model for some "),e("em",[t._v("target")]),t._v(" sources, and not for the rest, you may use "),e("code",[t._v("norbert.residual_model")]),t._v(" to let Norbert create a residual model for you.")]),t._v(" "),e("p",[t._v("Given all source spectrograms and the mixture Time-Frequency representation, this repository can build and apply the filter that is appropriate for separation, by optimally exploiting multichannel information (like in stereo signals). This is done in an iterative procedure called "),e("em",[t._v("Expectation Maximization")]),t._v(", where filtering and re-estimation of the parameters are iterated.")]),t._v(" "),e("p",[t._v("From a beginner's perspective, all you need to do is often to call "),e("code",[t._v("norbert.wiener")]),t._v(" with the mix and your spectrogram estimates. This should handle the rest.")]),t._v(" "),e("p",[t._v("From a more expert perspective, you will find the different ingredients from the EM algorithm as functions in the module as described in the "),e("a",{attrs:{href:"https://sigsep.github.io/norbert/",target:"_blank",rel:"noopener noreferrer"}},[t._v("API documentation"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[t._v("#")]),t._v(" Installation")]),t._v(" "),e("p",[e("code",[t._v("pip install norbert")])]),t._v(" "),e("h2",{attrs:{id:"usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("p",[t._v("Asssuming a complex spectrogram "),e("code",[t._v("X")]),t._v(", and a (magnitude) estimate of a target to be extracted from the spectrogram, performing the multichannel wiener filter is as simple as this:")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("X "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stft"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("audio"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nV "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" model"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("X"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nY "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" norbert"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wiener"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("V"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" X"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nestimate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" istft"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"how-to-contribute"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-to-contribute"}},[t._v("#")]),t._v(" How to contribute")]),t._v(" "),e("p",[e("em",[t._v("norbert")]),t._v(" is a community focused project, we therefore encourage the community to submit bug-fixes and requests for technical support through "),e("a",{attrs:{href:"https://github.com/sigsep/norbert/issues/new",target:"_blank",rel:"noopener noreferrer"}},[t._v("github issues"),e("OutboundLink")],1),t._v(". For more details of how to contribute, please follow our "),e("a",{attrs:{href:"https://github.com/sigsep/norbert/blob/master/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("CONTRIBUTING.md")]),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"authors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authors"}},[t._v("#")]),t._v(" Authors")]),t._v(" "),e("p",[t._v("Antoine Liutkus, Fabian-Robert St√∂ter")]),t._v(" "),e("h2",{attrs:{id:"citation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#citation"}},[t._v("#")]),t._v(" Citation")]),t._v(" "),e("p",[t._v("If you want to cite the "),e("em",[t._v("Norbert")]),t._v(" software package, please use the DOI from Zenodo:")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://doi.org/10.5281/zenodo.3269749",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://zenodo.org/badge/DOI/10.5281/zenodo.3269749.svg",alt:"DOI"}}),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"license"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#license"}},[t._v("#")]),t._v(" License")]),t._v(" "),e("p",[t._v("MIT")])])}),[],!1,null,null,null);e.default=o.exports}}]);